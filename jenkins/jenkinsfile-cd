pipeline {
    agent any
    
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ARTIFACT_RESOURCE_URL', value: '$.event_data.resources[0].resource_url'],
                [key: 'ARTIFACT_DIGEST', value: '$.event_data.resources[0].digest']
            ],
            causeString: 'Triggered on $ARTIFACT_URL',
            token: 'f0rtun3',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: false
        )
    }

    stages {       
        
        stage ('Update_Manifest_Repo') {
            environment { 
                GIT_AUTH = credentials('7cc49f46-3fda-44e1-860b-efcf4e0fbd63') 
                ARTIFACT_URL = ${ARTIFACT_RESOURCE_URL}.take(${ARTIFACT_RESOURCE_URL}.lastIndexOf(':')) + '@' + ${ARTIFACT_DIGEST}
            }
            steps{
                script{
                    def filename="${WORKSPACE}/kustomize/base/deployment.yaml"
                    def deploy_yaml = readYaml file:filename

                    // Change image in the file
                    deploy_yaml.spec.template.spec.containers[0].image = $ARTIFACT_URL

                    sh "rm $filename"
                    writeYaml file: filename, data: deploy_yaml
                }

                sh('''
                    git config user.name 'kathywan'
                    git config user.email 'qwan@pivotal.io'
                    git add . && git commit -am "update deploy image"

                    git config --local credential.helper "!f() { echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }; f"
                    git push origin master
                ''')

            }
        }

        stage ('Deploy_to_Dev') {
             steps {
                     withCredentials([string(credentialsId: "argocd-deploy-role", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh '''
                            ARGOCD_SERVER="argocd.sharedsvc.home.kwpivotal.com"
                            # ARTIFACT_URL=${ARTIFACT_RESOURCE_URL%:*}@$ARTIFACT_DIGEST
                            # Deploy to ArgoCD
                            ARGOCD_SERVER=$ARGOCD_SERVER argocd app sync fortune-app-dev --force
                            #ARGOCD_SERVER=$ARGOCD_SERVER argocd app set fortune-app-dev --kustomize-image $ARTIFACT_URL
                            ARGOCD_SERVER=$ARGOCD_SERVER argocd app wait fortune-app-dev
                        '''
               }
            }
        }

        stage ('Perform System Test') {
            steps {
                script {
                    input(id: "System Test Pass Gate", message: "If System Test passed, move forward?", ok: 'Start UAT Test')
                }
            }
        }

         stage ('Perform_UAT_Test') {
            steps {
                script {
                    input(id: "UAT Test Pass Gate", message: "If UAT passed, deploy Fortune app tp production?", ok: 'Deploy_to_Prod')
                }
            }
        }

        stage ('Deploy_to_Prod') {
             steps {
                     withCredentials([string(credentialsId: "argocd-deploy-role", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh '''
                            ARGOCD_SERVER="argocd.sharedsvc.home.kwpivotal.com"
                            # ARTIFACT_URL=${ARTIFACT_RESOURCE_URL%:*}@$ARTIFACT_DIGEST

                            # Deploy to ArgoCD
                            ARGOCD_SERVER=$ARGOCD_SERVER argocd app sync fortune-app-prod --force
                            # ARGOCD_SERVER=$ARGOCD_SERVER argocd app set fortune-app-prod --kustomize-image $ARTIFACT_URL
                            ARGOCD_SERVER=$ARGOCD_SERVER argocd app wait fortune-app-prod
                        '''
               }
            }
        }
    }
}